set nocompatible
set encoding=utf-8
set t_Co=256
set timeoutlen=1000 ttimeoutlen=0

set rtp+=~/.dotfiles/submodules/Vundle.vim/
set rtp+=~/.dotfiles/submodules/powerline/powerline/bindings/vim/
call vundle#rc()

" Plugin 'gmarik/vundle'

" Begin Vundle Packages
" Plugin 'daveisadork/powerline', {'rtp': 'powerline/bindings/vim/'}

Plugin 'scrooloose/syntastic'

" Visual stuff
Plugin 'altercation/vim-colors-solarized'
Plugin 'Yggdroot/indentLine'

" Utility stuff
Plugin 'editorconfig/editorconfig-vim'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-git'
Plugin 'scrooloose/nerdtree'
Plugin 'kien/ctrlp.vim'
Plugin 'jiangmiao/auto-pairs'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'

" Completion stuff
Plugin 'ervandew/supertab'
Plugin 'Valloric/YouCompleteMe'

" Python stuff
Plugin 'klen/python-mode'
Plugin 'davidhalter/jedi-vim'

" JavaScript stuff
Plugin 'jelera/vim-javascript-syntax'
Plugin 'pangloss/vim-javascript'
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'marijnh/tern_for_vim'
Plugin 'Shutnik/jshint2.vim'

" CSS/SCSS stuff
Plugin 'hail2u/vim-css3-syntax'
Plugin 'cakebaker/scss-syntax.vim'

" Other languages
Plugin 'jcf/vim-latex'
Plugin 'lambdatoast/elm.vim'

" End Vundle Packages

" Editorconfig
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" Powerline Setup
set laststatus=2
let g:Powerline_symbols = "fancy"

" NerdTree Setup
map <C-o> :NERDTreeToggle<CR>
let NERDTreeIgnore = ['\.pyc$']

" Python-mode
" Activate rope
" Keys:
" K             Show python docs
" <Ctrl-Space>  Rope autocomplete
" <Ctrl-c>g     Rope goto definition
" <Ctrl-c>d     Rope show documentation
" <Ctrl-c>f     Rope find occurrences
" <Leader>b     Set, unset breakpoint (g:pymode_breakpoint enabled)
" [[            Jump on previous class or function (normal, visual, operator modes)
" ]]            Jump on next class or function (normal, visual, operator modes)
" [M            Jump on previous class or method (normal, visual, operator modes)
" ]M            Jump on next class or method (normal, visual, operator modes)
let g:pymode_rope = 0

" Linting
let g:pymode_lint = 1
let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'mccabe']
" Auto check on save
let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 0
"let g:pymode_breakpoint_key = '<leader>b'

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Don't autofold code
let g:pymode_folding = 0

" let jshint2_save = 1

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

filetype indent on

" Auto-close the quickfix buffer if it's the only remaining buffer
aug QFClose
    au!
    au WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&buftype") == "quickfix"|q|endif
aug END

augroup vimrc_autocmds
    autocmd!

    " highlight characters past column 80
    autocmd FileType python highlight Excess ctermbg=Black guibg=Black
    autocmd FileType python match Excess /\%80v.*/
    autocmd FileType python set nowrap
    autocmd FileType css,html,ruby,eruby,yaml set ai sw=2 sts=2 et
    autocmd FileType python setlocal completeopt+=longest,menuone

    " These are the tweaks I apply to YCM's config, you don't need them but they
    " might help.
    " YCM gives you popups and splits by default that some people might not
    " like, so these should tidy it up a bit for you.
    autocmd Filetype javascript let g:ycm_add_preview_to_completeopt=0
    autocmd Filetype javascript let g:ycm_confirm_extra_conf=0
    autocmd Filetype javascript set completeopt-=preview
    autocmd Filetype javascript let g:used_javascript_libs = 'angularjs,angularui,angularuirouter,jquery'

    " rename tmux window
    autocmd BufReadPost,FileReadPost,BufNewFile * call system("tmux rename-window " . expand("%"))
augroup END

" <Tab> and <Shift-Tab> to indent/unindent selected text
vnoremap <S-Tab> <gv
vnoremap <Tab> >gv

" If the current buffer has never been saved, it will have no name,
" call the file browser to save it, otherwise just save it.
command -nargs=0 -bar Update if &modified 
                           \|   if empty(bufname('%'))
                           \|       browse confirm write
                           \|   else
                           \|       confirm write
                           \|   endif
                           \|endif

" UI config
syntax enable
set background=dark

set guifont=Sauce\ Code\ Powerline:h14
set go=egmLt
set cursorline
set colorcolumn=80
set number

set diffopt+=vertical

" Tabs and indention
set tabstop=4
set shiftwidth=4
set smarttab
set expandtab
set softtabstop=4
set backspace=2
let g:indentLine_enabled = 0
" let g:indentLine_color_term = 234
let g:indentLine_leadingSpaceEnabled = 1
let g:indentLine_leadingSpaceChar = '·'
set list lcs=tab:⤚—
set showtabline=2 " Always display the tabline, even if there is only one tab
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)
set mouse=a
let g:SuperTabDefaultCompletionType = "<c-n>"

" This does pbcopy/pbpaste integration
set clipboard=unnamed

" Try loading the solarized them, call the vundle install routine if it fails
try
    colorscheme solarized
catch /^Vim\%((\a\+)\)\=:E185/
    PluginInstall
    colorscheme solarized
endtry
